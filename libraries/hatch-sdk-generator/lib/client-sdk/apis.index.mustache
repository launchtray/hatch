import {DependencyContainer} from '@launchtray/tsyringe-async';
{{#apiInfo}}
{{#apis}}
{{#operations}}
import {
  AuthForwarding{{classFilename}},
  Remote{{classFilename}},
} from './{{classFilename}}';
{{/operations}}
{{/apis}}

import {
  {{#apis}}
  {{#operations}}
  {{classFilename}}BaseUrlInjectionToken,
  {{classFilename}}InjectionToken,
  {{/operations}}
  {{/apis}}
} from '../models';

// Use this to register APIs client-side, whether from a browser-side app or a dependent service
const registerRemoteApis = (
  container: DependencyContainer,
  baseUrl?: string,
  getToken?: (apiName: string) => string | symbol,
) => {
  {{#apis}}
  {{#operations}}
  container.registerInstance({{classFilename}}BaseUrlInjectionToken, baseUrl ?? '');
  container.registerSingleton(
    getToken?.('{{classFilename}}') ?? {{classFilename}}InjectionToken,
    Remote{{classFilename}},
  );
  {{/operations}}
  {{/apis}}
};

// Use this to register APIs server-side for the service implementing the API
const registerLocalApis = (
  container: DependencyContainer,
  baseUrl?: string,
  getToken?: (apiName: string) => string | symbol,
) => {
  {{#apis}}
  {{#operations}}
  container.registerInstance({{classFilename}}BaseUrlInjectionToken, baseUrl ?? `http://localhost:${process.env.PORT}`);
  container.registerSingleton(
    getToken?.('{{classFilename}}') ?? {{classFilename}}InjectionToken,
    AuthForwarding{{classFilename}},
  );
  {{/operations}}
  {{/apis}}
};

export {
  registerLocalApis,
  registerRemoteApis,
  {{#apis}}
  {{#operations}}
  AuthForwarding{{classFilename}},
  Remote{{classFilename}},
  {{/operations}}
  {{/apis}}
};
{{/apiInfo}}