/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import {containerSingleton, inject, injectAll} from '@launchtray/hatch-util';
import {
  {{#operations}}
  {{classFilename}}BaseUrlInjectionToken,
  {{/operations}}
} from '../runtime';
import * as runtime from '../runtime';
{{#imports.0}}
import * as models from '../models';
import {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models';
{{/imports.0}}
import {
  Configuration,
  ConfigurableFetchApi,
  ConfigurationParameters,
  HttpHeaders,
} from '@launchtray/hatch-fetch-util';
import {
  ApiAlternateAction,
  ApiError,
  setTypeHint,
} from '@launchtray/hatch-util';

// Redirect Blob type (hardcoded by typescript-fetch openapi-generator template) to ReadableStream
type Blob = ReadableStream;
type Set<T> = Array<T>;

interface ForwardedCredentials {
  cookie?: string;
  authHeader?: string;
};

{{#operations}}
@containerSingleton()
export class Remote{{classname}} implements runtime.{{classname}} {
  static configurationToken = Symbol('Remote{{classname}}Configuration');
  private readonly configuration: Configuration;
  private readonly configurableFetchApi: ConfigurableFetchApi;
  protected forwardedCredentials?: ForwardedCredentials;

  static create(configurationParams?: ConfigurationParameters) {
    return new Remote{{classname}}([configurationParams ?? {}], '');
  }

  {{#operation}}
  {{#responses}}
  async _create{{operationIdCamelCase}}ResponseFor{{code}}(
    response: Response,
  ): Promise<runtime.{{operationIdCamelCase}}HttpResponseFor{{code}} & {status: number}> {
    {{#headers.0}}
    const headers = {
      {{#headers}}
      {{name}}: runtime.{{> require-param }}(
        response.headers.get('{{baseName}}'),
        'header: "{{baseName}}"',
      ),
      {{/headers}}
    };
    {{/headers.0}}

    {{#dataType}}
    {{#isFile}}
    const bodyWithoutHint = runtime.requireNonNull(response.body, 'body');
    const body = setTypeHint(bodyWithoutHint, response.status);
    {{/isFile}}
    {{^isFile}}
    {{#primitiveType}}
    {{#isMapContainer}}
    const bodyWithoutHint = response.json();
    {{/isMapContainer}}
    {{#isListContainer}}
    const bodyWithoutHint = response.json();
    {{/isListContainer}}
    {{#simpleType}}
    const bodyWithoutHint = response.text() as any;
    {{/simpleType}}
    {{/primitiveType}}
    {{^primitiveType}}
    {{#isListContainer}}
    const bodyWithoutHint = response.json().then((jsonValue) => jsonValue.map(models.{{baseType}}FromJSON));
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isMapContainer}}
    const bodyWithoutHint = response.json().then((jsonValue) => runtime.mapValues(jsonValue, models.{{baseType}}FromJSON));
    {{/isMapContainer}}
    {{^isMapContainer}}
    const bodyWithoutHint = response.json().then((jsonValue) => models.{{baseType}}FromJSON(jsonValue));
    {{/isMapContainer}}
    {{/isListContainer}}
    {{/primitiveType}}
    const body = bodyWithoutHint.then((value: any) => setTypeHint(value, response.status));
    {{/isFile}}
    return {
      body,
      {{#headers.0}}
      headers: headers,
      {{/headers.0}}
      status: response.status as any,
    };
    {{/dataType}}
    {{^dataType}}
    return {
      {{#headers.0}}
      headers: headers,
      {{/headers.0}}
      status: response.status as any,
    };
    {{/dataType}}
  }
  {{/responses}}
  {{/operation}}

  constructor(
    @injectAll(Remote{{classname}}.configurationToken) configurationParams: ConfigurationParameters[],
    @inject({{classFilename}}BaseUrlInjectionToken) baseUrl: string,
  ) {
    const configParams = runtime.getFirstElement('{{classname}}.configurationToken', configurationParams, () => ({}));
    this.configuration = new Configuration({
      basePath: baseUrl,
      ...configParams,
    });
    this.configurableFetchApi = new ConfigurableFetchApi(this.configuration);
  }
  {{#operation}}

  async {{nickname}}Raw({{#allParams.0}}requestParameters: runtime.{{operationIdCamelCase}}HttpRequest{{/allParams.0}}): Promise<runtime.{{> response-type}}> {
    const queryParameters: any = {};

    {{#queryParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      {{#isCollectionFormatMulti}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }};
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
      {{/isCollectionFormatMulti}}
    }

    {{/isListContainer}}
    {{^isListContainer}}
    if (requestParameters.{{> param-path }} !== undefined) {
      {{#isDateTime}}
      queryParameters['{{baseName}}'] = (requestParameters.{{> param-path }} as any).toISOString();
      {{/isDateTime}}
      {{^isDateTime}}
      {{#isDate}}
      queryParameters['{{baseName}}'] = (requestParameters.{{> param-path }} as any).toISOString().substring(0,10);
      {{/isDate}}
      {{^isDate}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }};
      {{/isDate}}
      {{/isDateTime}}
    }

    {{/isListContainer}}
    {{/queryParams}}
    const headerParameters: HttpHeaders = {};

    if (this.forwardedCredentials != null) {
      headerParameters['x-req-from-ssr'] = 'true';
    }
    const forwardedCookie = this.forwardedCredentials?.cookie;
    if (forwardedCookie != null) {
      headerParameters['Cookie'] = forwardedCookie;
    }
    const forwardedAuthHeader = this.forwardedCredentials?.authHeader;
    if (forwardedAuthHeader != null) {
      headerParameters['Authorization'] = forwardedAuthHeader;
    }

    {{#bodyParam}}
    {{^consumes}}
    headerParameters['Content-Type'] = 'application/json';

    {{/consumes}}
    {{#consumes.0}}
    headerParameters['Content-Type'] = '{{{mediaType}}}';

    {{/consumes.0}}
    {{/bodyParam}}
    {{#headerParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      headerParameters['{{baseName}}'] = requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
    }

    {{/isListContainer}}
    {{^isListContainer}}
    {{^required}}
    const {{paramName}}DefaultValue = {{{defaultValue}}};
    if (requestParameters.{{> param-path }} != null) {
      headerParameters['{{baseName}}'] = String(requestParameters.{{> param-path }});
    } else if ({{paramName}}DefaultValue != null) {
      headerParameters['{{baseName}}'] = String({{{defaultValue}}});
    }
    {{/required}}
    {{#required}}
    if (requestParameters.{{> param-path }} != null) {
      headerParameters['{{baseName}}'] = String(requestParameters.{{> param-path }});
    }
    {{/required}}

    {{/isListContainer}}
    {{/headerParams}}
    {{#authMethods}}
    {{#isBasic}}
    {{#isBasicBasic}}
    if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
      headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    {{/isBasicBearer}}
    {{/isBasic}}
    {{#isApiKey}}
    {{#isKeyInHeader}}
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["{{keyParamName}}"] = this.configuration.apiKey("{{keyParamName}}"); // {{name}} authentication
    }

    {{/isKeyInHeader}}
    {{#isKeyInQuery}}
    if (this.configuration && this.configuration.apiKey) {
      queryParameters["{{keyParamName}}"] = this.configuration.apiKey("{{keyParamName}}"); // {{name}} authentication
    }

    {{/isKeyInQuery}}
    {{/isApiKey}}
    {{#isOAuth}}
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === 'function') {
        headerParameters["Authorization"] = this.configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    {{/isOAuth}}
    {{/authMethods}}
    {{#hasFormParams}}
    const consumes: runtime.Consume[] = [
      {{#consumes}}
      { contentType: '{{{mediaType}}}' },
      {{/consumes}}
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    {{#formParams}}
    {{#isFile}}
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    {{/isFile}}
    {{/formParams}}
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    {{#formParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      {{#isCollectionFormatMulti}}
      requestParameters.{{> param-path }}.forEach((element) => {
        formParams.append('{{baseName}}', element as any);
      })
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
      formParams.append('{{baseName}}', requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]));
      {{/isCollectionFormatMulti}}
    }

    {{/isListContainer}}
    {{^isListContainer}}
    if (requestParameters.{{> param-path }} !== undefined) {
      formParams.append('{{baseName}}', requestParameters.{{> param-path }} as any);
    }

    {{/isListContainer}}
    {{/formParams}}
    {{/hasFormParams}}
    const response = await this.configurableFetchApi.request({
      path: `{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters.{{> param-path }}))){{/pathParams}},
      method: '{{httpMethod}}',
      headers: headerParameters,
      query: queryParameters,
      {{#hasBodyParam}}
      {{#bodyParam}}
      {{#isContainer}}
      body: requestParameters.{{> param-path }}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}.map(models.{{datatype}}ToJSON){{/isPrimitiveType}}{{/items}}{{/isListContainer}},
      {{/isContainer}}
      {{^isContainer}}
      {{^isPrimitiveType}}
      body: models.{{{dataType}}}ToJSON(requestParameters.{{> param-path }}),
      {{/isPrimitiveType}}
      {{#isPrimitiveType}}
      body: requestParameters.{{> param-path }} as any,
      {{/isPrimitiveType}}
      {{/isContainer}}
      {{/bodyParam}}
      {{/hasBodyParam}}
      {{#hasFormParams}}
      body: formParams,
      {{/hasFormParams}}
    });
    {{#responses}}

    if (response.status === {{code}}) {
      return this._create{{operationIdCamelCase}}ResponseFor{{code}}(response);
    }
    {{/responses}}
    throw new ApiError(new ApiAlternateAction(400), `Client received unexpected status: ${response.status}`);
  }

  async {{nickname}}({{#allParams.0}}requestParameters: runtime.{{operationIdCamelCase}}HttpRequest{{/allParams.0}}): Promise<runtime.{{operationIdCamelCase}}HttpResponseBody> {
    return (await this.{{nickname}}Raw({{#allParams.0}}requestParameters{{/allParams.0}})).body;
  }
  {{/operation}}
}

@containerSingleton()
export class AuthForwarding{{classname}} extends Remote{{classname}} {
  constructor(
    @injectAll(Remote{{classname}}.configurationToken) configurationParams: ConfigurationParameters[],
    @inject({{classFilename}}BaseUrlInjectionToken) baseUrl: string,
    @injectAll('cookie') public readonly cookie: string[],
    @injectAll('authHeader') public readonly authHeader: string[],
  ) {
    super(configurationParams, baseUrl);
    this.forwardedCredentials = {
      cookie: runtime.getFirstElement('cookie', cookie),
      authHeader: runtime.getFirstElement('authHeader', authHeader),
    };
  }
}

{{/operations}}
{{#hasEnums}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
/**
  * @export
  * @enum {string}
  */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
  {{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}