/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import {injectAll, injectable} from '@launchtray/hatch-util';
import * as runtime from '../runtime';
import {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models';
import * as models from '../models';

{{#operations}}
@injectable()
export class Remote{{classname}} implements models.{{classname}} {
  static configurationToken = Symbol('Remote{{classname}}Configuration');
  private readonly configuration: runtime.Configuration;
  private readonly configurableFetchApi: runtime.ConfigurableFetchApi;

  constructor(
    @injectAll(Remote{{classname}}.configurationToken) configurationParams: runtime.ConfigurationParameters[],
  ) {
    if (configurationParams.length > 1) {
      throw new Error('{{classname}}.configurationToken should only be registered once');
    } else if (configurationParams.length == 1) {
      this.configuration = new runtime.Configuration(configurationParams[0]);
    } else {
      this.configuration = new runtime.Configuration();
    }
    this.configurableFetchApi = new runtime.ConfigurableFetchApi(this.configuration);
  }
  {{#operation}}

  async {{nickname}}Raw({{#allParams.0}}requestParameters: models.{{operationIdCamelCase}}Request{{/allParams.0}}): Promise<models.{{> response-type}} & {raw: Response}> {
    const queryParameters: any = {};

    {{#queryParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      {{#isCollectionFormatMulti}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }};
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
      {{/isCollectionFormatMulti}}
    }

    {{/isListContainer}}
    {{^isListContainer}}
    if (requestParameters.{{> param-path }} !== undefined) {
      {{#isDateTime}}
      queryParameters['{{baseName}}'] = (requestParameters.{{> param-path }} as any).toISOString();
      {{/isDateTime}}
      {{^isDateTime}}
      {{#isDate}}
      queryParameters['{{baseName}}'] = (requestParameters.{{> param-path }} as any).toISOString().substr(0,10);
      {{/isDate}}
      {{^isDate}}
      queryParameters['{{baseName}}'] = requestParameters.{{> param-path }};
      {{/isDate}}
      {{/isDateTime}}
    }

    {{/isListContainer}}
    {{/queryParams}}
    const headerParameters: runtime.HTTPHeaders = {};

    {{#bodyParam}}
    {{^consumes}}
    headerParameters['Content-Type'] = 'application/json';

    {{/consumes}}
    {{#consumes.0}}
    headerParameters['Content-Type'] = '{{{mediaType}}}';

    {{/consumes.0}}
    {{/bodyParam}}
    {{#headerParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      headerParameters['{{baseName}}'] = requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
    }

    {{/isListContainer}}
    {{^isListContainer}}
    {{^required}}
    const {{paramName}}DefaultValue = {{{defaultValue}}};
    if (requestParameters.{{> param-path }} != null) {
      headerParameters['{{baseName}}'] = String(requestParameters.{{> param-path }});
    } else if ({{paramName}}DefaultValue != null) {
      headerParameters['{{baseName}}'] = String({{{defaultValue}}});
    }
    {{/required}}
    {{#required}}
    if (requestParameters.{{> param-path }} != null) {
      headerParameters['{{baseName}}'] = String(requestParameters.{{> param-path }});
    }
    {{/required}}

    {{/isListContainer}}
    {{/headerParams}}
    {{#authMethods}}
    {{#isBasic}}
    {{#isBasicBasic}}
    if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
      headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
    }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    {{/isBasicBearer}}
    {{/isBasic}}
    {{#isApiKey}}
    {{#isKeyInHeader}}
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["{{keyParamName}}"] = this.configuration.apiKey("{{keyParamName}}"); // {{name}} authentication
    }

    {{/isKeyInHeader}}
    {{#isKeyInQuery}}
    if (this.configuration && this.configuration.apiKey) {
      queryParameters["{{keyParamName}}"] = this.configuration.apiKey("{{keyParamName}}"); // {{name}} authentication
    }

    {{/isKeyInQuery}}
    {{/isApiKey}}
    {{#isOAuth}}
    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      if (typeof this.configuration.accessToken === 'function') {
        headerParameters["Authorization"] = this.configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]);
      } else {
        headerParameters["Authorization"] = this.configuration.accessToken;
      }
    }

    {{/isOAuth}}
    {{/authMethods}}
    {{#hasFormParams}}
    const consumes: runtime.Consume[] = [
      {{#consumes}}
      { contentType: '{{{mediaType}}}' },
      {{/consumes}}
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    {{#formParams}}
    {{#isFile}}
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    {{/isFile}}
    {{/formParams}}
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    {{#formParams}}
    {{#isListContainer}}
    if (requestParameters.{{> param-path }}) {
      {{#isCollectionFormatMulti}}
      requestParameters.{{> param-path }}.forEach((element) => {
        formParams.append('{{baseName}}', element as any);
      })
      {{/isCollectionFormatMulti}}
      {{^isCollectionFormatMulti}}
      formParams.append('{{baseName}}', requestParameters.{{> param-path }}.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]));
      {{/isCollectionFormatMulti}}
    }

    {{/isListContainer}}
    {{^isListContainer}}
    if (requestParameters.{{> param-path }} !== undefined) {
      formParams.append('{{baseName}}', requestParameters.{{> param-path }} as any);
    }

    {{/isListContainer}}
    {{/formParams}}
    {{/hasFormParams}}
    const response = await this.configurableFetchApi.request({
      path: `{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters.{{> param-path }}))){{/pathParams}},
      method: '{{httpMethod}}',
      headers: headerParameters,
      query: queryParameters,
      {{#hasBodyParam}}
      {{#bodyParam}}
      {{#isContainer}}
      body: requestParameters.{{> param-path }}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}.map(models.{{datatype}}ToJSON){{/isPrimitiveType}}{{/items}}{{/isListContainer}},
      {{/isContainer}}
      {{^isContainer}}
      {{^isPrimitiveType}}
      body: models.{{{dataType}}}ToJSON(requestParameters.{{> param-path }}),
      {{/isPrimitiveType}}
      {{#isPrimitiveType}}
      body: requestParameters.{{> param-path }} as any,
      {{/isPrimitiveType}}
      {{/isContainer}}
      {{/bodyParam}}
      {{/hasBodyParam}}
      {{#hasFormParams}}
      body: formParams,
      {{/hasFormParams}}
    });

    {{#responseHeaders.0}}
    const responseHeaders = {
      {{#responseHeaders}}
      {{name}}: runtime.{{> require-param }}(
        response.headers.get('{{baseName}}'),
        'header: "{{baseName}}"',
      ),
      {{/responseHeaders}}
    };
    {{/responseHeaders.0}}

    {{#returnType}}
    {{#isResponseFile}}
    return {
      raw: response,
      body: response.blob(),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isResponseFile}}
    {{^isResponseFile}}
    {{#returnTypeIsPrimitive}}
    {{#isMapContainer}}
    return {
      raw: response,
      body: response.json(),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isMapContainer}}
    {{#isListContainer}}
    return {
      raw: response,
      body: response.json(),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isListContainer}}
    {{#returnSimpleType}}
    return {
      raw: response,
      body: response.text() as any,
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/returnSimpleType}}
    {{/returnTypeIsPrimitive}}
    {{^returnTypeIsPrimitive}}
    {{#isListContainer}}
    return {
      raw: response,
      body: response.json().then((jsonValue) => jsonValue.map(models.{{returnBaseType}}FromJSON)),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isListContainer}}
    {{^isListContainer}}
    {{#isMapContainer}}
    return {
      raw: response,
      body: response.json().then((jsonValue) => runtime.mapValues(jsonValue, models.{{returnBaseType}}FromJSON)),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isMapContainer}}
    {{^isMapContainer}}
    return {
      raw: response,
      body: response.json().then((jsonValue) => models.{{returnBaseType}}FromJSON(jsonValue)),
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/isMapContainer}}
    {{/isListContainer}}
    {{/returnTypeIsPrimitive}}
    {{/isResponseFile}}
    {{/returnType}}
    {{^returnType}}
    return {
      raw: response,
      {{#responseHeaders.0}}
      headers: responseHeaders,
      {{/responseHeaders.0}}
    };
    {{/returnType}}
  }
  {{#returnType}}

  async {{nickname}}({{#allParams.0}}requestParameters: models.{{operationIdCamelCase}}Request{{/allParams.0}}): Promise<{{returnType}}> {
    return (await this.{{nickname}}Raw({{#allParams.0}}requestParameters{{/allParams.0}})).body;
  }
  {{/returnType}}
  {{/operation}}
}
{{/operations}}
{{#hasEnums}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
/**
  * @export
  * @enum {string}
  */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
  {{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}