{{#models}}
{{#model}}
import {
  {{classFilename}},
} from './models/{{{classFilename}}}';
{{/model}}
{{/models}}

// Redirect Blob type (hardcoded by typescript-fetch openapi-generator template) to ReadableStream
type Blob = ReadableStream;

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}

export interface {{operationIdCamelCase}}HttpRequest {
{{#headerParams.0}}
  headers: {
  {{#headerParams}}
    {{> param-type-definition}}
  {{/headerParams}}
  };
{{/headerParams.0}}
{{#bodyParam}}
{{#dataType}}
  body: {{{dataType}}};
{{/dataType}}
{{/bodyParam}}
{{#pathParams.0}}
  pathParams: {
  {{#pathParams}}
    {{> param-type-definition}}
  {{/pathParams}}
  };
{{/pathParams.0}}
{{#queryParams.0}}
  queryParams: {
  {{#queryParams}}
    {{> param-type-definition}}
  {{/queryParams}}
  };
{{/queryParams.0}}
{{#formParams.0}}
  formParams: {
  {{#formParams}}
    {{> param-type-definition}}
  {{/formParams}}
  };
{{/formParams.0}}
}

export interface {{operationIdCamelCase}}HttpResponse {
{{#responseHeaders.0}}
  headers: {
    contentType?: string;
  {{#responseHeaders}}
    {{> param-type-definition}}
  {{/responseHeaders}}
  };
{{/responseHeaders.0}}
{{^responseHeaders.0}}
  headers?: {
    contentType?: string;
  };
{{/responseHeaders.0}}
{{#returnType}}
  body: {{{returnType}}} | Promise<{{{returnType}}}>;
{{/returnType}}
  statusCode?: number;
}
{{/operation}}
{{/operations}}
{{#hasEnums}}
{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}

export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
  {{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
  {{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}
{{/apis}}
{{/apiInfo}}

export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

export const requireNonNull = <T>(value: T | null | undefined, name: string): T => {
  if (value != null) {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireString = (value: unknown | null | undefined, name: string): string => {
  if (typeof value === 'string') {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalString = (value: unknown | null | undefined, name: string): string | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireString(value, name);
};

export const requireStringArray = (value: unknown[] | null | undefined, name: string): string[] => {
  if (value != null && value.length != null) {
    return value.map((element) => requireString(element, name)) as string[];
  }
  return throwInvalidParamError(name);
};

export const requireOptionalStringArray = (value: unknown[] | null | undefined, name: string): string[] | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireStringArray(value, name);
};

export const requireDate = (value: unknown | null | undefined, name: string): Date => {
  const date = new Date(requireString(value, name));
  if (Object.prototype.toString.call(date) === "[object Date]" && !isNaN(date.getTime())) {
    return date;
  }
  return throwInvalidParamError(name);
}

export const requireOptionalDate = (value: unknown | null | undefined, name: string): Date | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireDate(value, name);
};

export const requireDateArray = (value: unknown[] | null | undefined, name: string): Date[] => {
  if (value != null && value.length != null) {
    return value.map((element) => requireDate(element, name)) as Date[];
  }
  return throwInvalidParamError(name);
};

export const requireOptionalDateArray = (value: unknown[] | null | undefined, name: string): Date[] | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireDateArray(value, name);
};

export const requireEnum = <E, V>(value: unknown | null | undefined, enumValues: V[], name: string): E => {
  if (enumValues.includes(value as V)) {
    return value as E;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalEnum = <E, V>(
  value: unknown | null | undefined,
  enumValues: V[],
  name: string
): E | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireEnum<E, V>(value, enumValues, name);
};

export const requireEnumArray = <E, V>(
  value: unknown[] | null | undefined,
  enumValues: V[],
  name: string,
): E[] => {
  if (value != null && value.length != null) {
    return value.map((element) => requireEnum<E, V>(element, enumValues, name)) as E[];
  }
  return throwInvalidParamError(name);
};

export const requireOptionalEnumArray = <E, V>(
  value: unknown[] | null | undefined,
  enumValues: V[],
  name: string,
): E[] | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireEnumArray(value, enumValues, name);
};

export const requireNumber = (value: unknown | null | undefined, name: string): number => {
  if (value == null) {
    return throwInvalidParamError(name);
  }
  const asNumber = Number(value);
  if (!isNaN(asNumber)) {
    return asNumber;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalNumber = (value: unknown | null | undefined, name: string): number | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireNumber(value, name);
};

export const requireNumberArray = (value: unknown[] | null | undefined, name: string): number[] => {
  if (value != null && value.length != null) {
    return value.map((element) => requireNumber(element, name)) as number[];
  }
  return throwInvalidParamError(name);
};

export const requireOptionalNumberArray = (value: unknown[] | null | undefined, name: string): number[] | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireNumberArray(value, name);
};

export const requireBoolean = (value: unknown | null | undefined, name: string): boolean => {
  if (typeof value === 'boolean') {
    return value;
  }
  if (typeof value === 'string') {
    const lowerCaseValue = value.toLowerCase();
    if (lowerCaseValue === 'true' || lowerCaseValue === 'yes' || lowerCaseValue === '1') {
      return true;
    }
    if (lowerCaseValue === 'false' || lowerCaseValue === 'no' || lowerCaseValue === '0') {
      return false;
    }
  }
  if (typeof value === 'number') {
    if (value === 1) {
      return true;
    }
    if (value === 0) {
      return false;
    }
  }
  return throwInvalidParamError(name);
};

export const requireOptionalBoolean = (value: unknown | null | undefined, name: string): boolean | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireBoolean(value, name);
};

export const requireBooleanArray = (value: unknown[] | null | undefined, name: string): boolean[] => {
  if (value != null && value.length != null) {
    return value.map((element) => requireBoolean(element, name)) as boolean[];
  }
  return throwInvalidParamError(name);
};

export const requireOptionalBooleanArray = (value: unknown[] | null | undefined, name: string): boolean[] | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireBooleanArray(value, name);
};

export const getFirstElement = <T>(
  name: string,
  inputArray: T[],
  createDefaultValue?: () => T | undefined,
): T | undefined => {
  if (inputArray.length > 1) {
    throw new Error(`${name} should only be registered once`);
  } else if (inputArray.length == 1) {
    return inputArray[0];
  }
  return createDefaultValue?.();
};

