export const requireNonNull = <T>(value: T | null | undefined, name: string): T => {
  if (value != null) {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireString = (value: unknown | null | undefined, name: string): string => {
  if (typeof value === 'string') {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalString = (value: unknown | null | undefined, name: string): string | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireString(value, name);
};

export const requireEnum = <E, V>(value: unknown | null | undefined, enumValues: V[], name: string): E => {
  if (enumValues.includes(value as V)) {
    return value as E;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalEnum = <E, V>(
  value: unknown | null | undefined,
  enumValues: V[],
  name: string
): E | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireEnum<E, V>(value, enumValues, name);
};

export const requireNumber = (value: unknown | null | undefined, name: string): number => {
  if (value == null) {
    return throwInvalidParamError(name);
  }
  const asNumber = Number(value);
  if (!isNaN(asNumber)) {
    return asNumber;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalNumber = (value: unknown | null | undefined, name: string): number | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireNumber(value, name);
};

export const requireBoolean = (value: unknown | null | undefined, name: string): boolean => {
  if (typeof value === 'boolean') {
    return value;
  }
  if (typeof value === 'string') {
    const lowerCaseValue = value.toLowerCase();
    if (lowerCaseValue === 'true' || lowerCaseValue === 'yes' || lowerCaseValue === '1') {
      return true;
    }
    if (lowerCaseValue === 'false' || lowerCaseValue === 'no' || lowerCaseValue === '0') {
      return false;
    }
  }
  if (typeof value === 'number') {
    if (value === 1) {
      return true;
    }
    if (value === 0) {
      return false;
    }
  }
  return throwInvalidParamError(name);
};

export const requireOptionalBoolean = (value: unknown | null | undefined, name: string): boolean | undefined => {
  if (value == null) {
    return undefined;
  }
  return requireBoolean(value, name);
};
