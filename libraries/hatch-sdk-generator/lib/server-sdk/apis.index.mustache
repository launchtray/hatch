import {
  ASSOCIATED_API_SPEC_KEY,
  ASSOCIATED_API_SPEC_ID_KEY,
  middlewareFor,
} from '@launchtray/hatch-server';

import {DependencyContainer} from '@launchtray/tsyringe-async';

import {Class} from '@launchtray/hatch-util';
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import {Swagger} from '../../api-spec';
import SwaggerV3 = Swagger.SwaggerV3;
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
import api from '../../api.json';

api[ASSOCIATED_API_SPEC_ID_KEY] = Symbol('uniqueApiIdentifier'); // Guaranteed unique per module

{{#apiInfo}}
{{#apis}}
{{#operations}}
import {
  UnprotectedLocal{{classFilename}},
  {{classFilename}}Controller,
  {{classFilename}}Delegate,
} from './{{classFilename}}';
{{/operations}}
{{/apis}}

{{#apis}}
{{#operations}}
{{classFilename}}Controller[ASSOCIATED_API_SPEC_KEY] = api;
{{/operations}}
{{/apis}}

const getApiMiddleware = ({
{{#apis}}
  delegateFor{{classFilename}},
{{/apis}}
} : {
{{#apis}}
  delegateFor{{classFilename}}: Class<{{classFilename}}Delegate>,
{{/apis}}
}) => {
  return [
{{#apis}}
    middlewareFor({{classFilename}}Controller, delegateFor{{classFilename}}),
{{/apis}}
  ];
};

// Note: intentional use of Symbol.for (vs. Symbol(...)) below to ensure client and server SDKs use same symbol
{{#apis}}
{{#operations}}
{{> api-injection-token}}
{{/operations}}
{{/apis}}

const registerUnprotectedLocalApis = (
  container: DependencyContainer,
  getToken?: (apiName: string) => string | symbol,
) => {
  {{#apis}}
  {{#operations}}
  container.register(
    getToken?.('{{classFilename}}') ?? {{classFilename}}InjectionToken,
    UnprotectedLocal{{classFilename}},
  );
  {{/operations}}
  {{/apis}}
};

export {
  getApiMiddleware,
  registerUnprotectedLocalApis,
{{#apis}}
{{#operations}}
  UnprotectedLocal{{classFilename}},
  {{classFilename}}Controller,
  {{classFilename}}Delegate,
{{/operations}}
{{/apis}}
};

{{/apiInfo}}