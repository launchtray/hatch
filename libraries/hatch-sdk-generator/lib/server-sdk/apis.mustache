/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
/* eslint-disable @typescript-eslint/no-empty-interface,dot-notation */
import stream from 'stream';
import {
  alternateActionResponseSent,
  apiErrorResponseSent,
  controller,
  Delegator,
  route,
} from '@launchtray/hatch-server';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';
import {
  ApiDelegateResponse,
  inject,
  injectable,
  Logger,
} from '@launchtray/hatch-util';
import {
  DependencyContainer,
  resolveParams,
} from '@launchtray/tsyringe-async';
{{#imports.0}}
import * as models from '../models';
import {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models';
{{/imports.0}}
import * as runtime from '../runtime';

// Redirect Blob type (hardcoded by typescript-fetch openapi-generator template) to ReadableStream
type Blob = ReadableStream;

export interface {{classname}}Delegate {
  {{#operations}}
  {{#operation}}
  handle{{operationIdCamelCase}}(
    request: runtime.{{operationIdCamelCase}}HttpRequest & {isLocal: boolean, isFromSsr: boolean},
    ...optionalInjections: unknown[]
  ): ApiDelegateResponse<runtime.{{> response-type}}>;
  {{/operation}}
  {{/operations}}
}

{{> api-interface}}

const apiDelegateToken = Symbol('{{classname}}Delegate');

{{#operations}}
@injectable()
export class UnprotectedLocal{{classname}} implements {{classname}} {
  static delegateToken = apiDelegateToken;

  constructor(
    @inject('Logger') private readonly logger: Logger,
    @inject(UnprotectedLocal{{classname}}.delegateToken) public readonly delegate: {{classname}}Delegate,
    @inject('weakContainer') public readonly weakContainer: WeakRef<DependencyContainer>,
  ) {
  }
  {{#operation}}

  async {{nickname}}Raw({{#allParams.0}}request: runtime.{{operationIdCamelCase}}HttpRequest{{/allParams.0}}): Promise<runtime.{{> response-type}}> {
    const target = this.delegate.constructor.prototype;
    const clientRequestContainer = this.weakContainer.deref();
    if (clientRequestContainer == null) {
      throw new Error('Weak reference to client request container no longer exists');
    }
    const args = await resolveParams(
      clientRequestContainer,
      target,
      'handle{{operationIdCamelCase}}',
      {...request, isLocal: true, isFromSsr: true},
    ) as [runtime.{{operationIdCamelCase}}HttpRequest & {isLocal: boolean, isFromSsr: boolean}, ...unknown[]];
    const delegateResponse = await this.delegate.handle{{operationIdCamelCase}}(...args);
    return runtime.getLocalApiReturnValue(delegateResponse);
  }
  {{#returnType}}

  async {{nickname}}({{#allParams.0}}request: runtime.{{operationIdCamelCase}}HttpRequest{{/allParams.0}}): Promise<{{{returnType}}}> {
    return (await this.{{nickname}}Raw({{#allParams.0}}request{{/allParams.0}})).body;
  }
  {{/returnType}}
  {{/operation}}
}
{{/operations}}

@controller({injectContainerOnly: true})
export class {{classname}}Controller implements Delegator<{{classname}}Delegate> {
  static delegateToken = apiDelegateToken;

  constructor(
    @inject('Logger') private readonly logger: Logger,
    @inject({{classname}}Controller.delegateToken) public readonly delegate: {{classname}}Delegate,
  ) {
  }
  {{#operations}}
  {{#operation}}

  @route.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}('{{path}}'{{#pathParams.0}}.replace(/{([^}]*)}/g, ':$1'){{/pathParams.0}})
  async handle{{operationIdCamelCase}}(requestContainer: DependencyContainer) {
    {{#hasFormParams}}
    throw new Error('NOT SUPPORTED: The hatch SDK generator does not (yet?) support form params');
    {{/hasFormParams}}
    const basicRouteParams = await requestContainer.resolve(BasicRouteParams);
    try {
      const request: runtime.{{operationIdCamelCase}}HttpRequest = {
        {{#headerParams.0}}
        headers: {
        {{#headerParams}}
          {{paramName}}: runtime.{{> require-param }}(
            basicRouteParams.req.header('{{baseName}}'),
            {{#isEnum}}
            {{> enum-values-array}},
            {{/isEnum}}
            'header: "{{baseName}}"',
          ),
        {{/headerParams}}
        },
        {{/headerParams.0}}
        {{#bodyParam}}
        {{#isListContainer}}
        {{#items}}
        {{#isPrimitiveType}}
        body: basicRouteParams.req.body{{#isNumeric}}.map(Number){{/isNumeric}},
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        body: basicRouteParams.req.body.map(models.{{{baseType}}}FromJSON),
        {{/isPrimitiveType}}
        {{/items}}
        {{/isListContainer}}
        {{^isListContainer}}
        body: models.{{{dataType}}}FromJSON(basicRouteParams.req.body),
        {{/isListContainer}}
        {{/bodyParam}}
        {{#pathParams.0}}
        pathParams: {
        {{#pathParams}}
          {{paramName}}: runtime.{{> require-param }}(
            basicRouteParams.req.params.{{baseName}},
            {{#isEnum}}
            {{> enum-values-array}},
            {{/isEnum}}
            'path param: "{{baseName}}"',
          ),
        {{/pathParams}}
        },
        {{/pathParams.0}}
        {{#queryParams.0}}
        queryParams: {
        {{#queryParams}}
        {{#isListContainer}}
          {{paramName}}: runtime.{{> require-param }}Array(
            basicRouteParams.req.query.{{baseName}}{{^isCollectionFormatMulti}}.split(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]){{/isCollectionFormatMulti}},
            {{#isEnum}}
            {{> enum-values-array}},
            {{/isEnum}}
            'query param: "{{baseName}}"',
          ),
        {{/isListContainer}}
        {{^isListContainer}}
          {{paramName}}: runtime.{{> require-param }}(
            basicRouteParams.req.query.{{baseName}},
            {{#isEnum}}
            {{> enum-values-array}},
            {{/isEnum}}
            'query param: "{{baseName}}"',
          ),
        {{/isListContainer}}
        {{/queryParams}}
        },
        {{/queryParams.0}}
      };
      const target = this.delegate.constructor.prototype;
      const args = await resolveParams(
        requestContainer,
        target,
        'handle{{operationIdCamelCase}}',
        {...request, isLocal: false, isFromSsr: basicRouteParams.req.header('x-req-from-ssr') === 'true'},
      ) as [runtime.{{operationIdCamelCase}}HttpRequest & {isLocal: boolean, isFromSsr: boolean}, ...unknown[]];

      const delegateResponse = await this.delegate.handle{{operationIdCamelCase}}(...args);
      if (alternateActionResponseSent(delegateResponse, basicRouteParams.res)) {
        return;
      }

      {{#responseHeaders.0}}
      const responseHeaders = {};
      {{#responseHeaders}}
      if (delegateResponse.headers.{{name}} != null) {
        responseHeaders['{{baseName}}'] = delegateResponse.headers.{{name}};
      }
      {{/responseHeaders}}
      basicRouteParams.res.set(responseHeaders);
      {{/responseHeaders.0}}
      {{#returnType}}
      const delegateResponseBody = await delegateResponse.body;
      {{#isResponseFile}}
      basicRouteParams.res.set('Content-Type', delegateResponse.headers?.contentType ?? 'application/octet-stream');
      basicRouteParams.res.status(delegateResponse?.statusCode ?? 200);
      // https://stackoverflow.com/questions/73308289
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      stream.Readable.fromWeb(delegateResponseBody).pipe(basicRouteParams.res);
      {{/isResponseFile}}
      {{^isResponseFile}}
      {{#returnTypeIsPrimitive}}
      {{#isMapContainer}}
      basicRouteParams.res.set('Content-Type', delegateResponse.headers?.contentType ?? 'application/json');
      {{/isMapContainer}}
      {{#isListContainer}}
      basicRouteParams.res.set('Content-Type', delegateResponse.headers?.contentType ?? 'application/json');
      {{/isListContainer}}
      {{#returnSimpleType}}
      basicRouteParams.res.set('Content-Type', delegateResponse.headers?.contentType ?? 'text/plain');
      {{/returnSimpleType}}
      basicRouteParams.res.status(delegateResponse?.statusCode ?? 200).send(delegateResponseBody);
      {{/returnTypeIsPrimitive}}
      {{^returnTypeIsPrimitive}}
      basicRouteParams.res.set('Content-Type', delegateResponse.headers?.contentType ?? 'application/json');
      {{#isListContainer}}
      const responseJson = delegateResponseBody.map(models.{{returnBaseType}}ToJSON);
      basicRouteParams.res.status(delegateResponse?.statusCode ?? 200).send(responseJson);
      {{/isListContainer}}
      {{^isListContainer}}
      {{#isMapContainer}}
      const responseJson = runtime.mapValues(delegateResponseBody, models.{{returnBaseType}}ToJSON);
      basicRouteParams.res.status(delegateResponse?.statusCode ?? 200).send(responseJson);
      {{/isMapContainer}}
      {{^isMapContainer}}
      const responseJson = models.{{returnBaseType}}ToJSON(delegateResponseBody);
      basicRouteParams.res.status(delegateResponse?.statusCode ?? 200).send(responseJson);
      {{/isMapContainer}}
      {{/isListContainer}}
      {{/returnTypeIsPrimitive}}
      {{/isResponseFile}}
      {{/returnType}}
      {{^returnType}}
      basicRouteParams.res.sendStatus(200);
      {{/returnType}}
    } catch (err: unknown) {
      this.logger.info(`Error servicing handle{{operationIdCamelCase}}: ${(err as {message?: string}).message}`);
      if (apiErrorResponseSent(err, basicRouteParams.res)) {
        return;
      }
      basicRouteParams.res.set('Content-Type', 'text/plain');
      basicRouteParams.res.status(500).send((err as {message?: string}).message ?? '');
    }
  }
  {{/operation}}
  {{/operations}}
}
