{{>licenseInfo}}
/* eslint-disable @typescript-eslint/no-empty-interface -- allow empty request/responses */

import {
  controller,
  Delegator,
} from '@launchtray/hatch-server';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';
import {inject, Logger} from '@launchtray/hatch-util';
import {
  DependencyContainer,
  resolveParams,
} from '@launchtray/tsyringe-async';
import {
  ApiDelegateResponse,
  handleAlternateActions,
  route,
} from '../runtime';
{{#imports.0}}
import * as models from '../models';
{{/imports.0}}

export interface {{classname}}Delegate {
  {{#operations}}
  {{#operation}}
  handle{{operationIdCamelCase}}(
    request: models.{{operationIdCamelCase}}Request,
    ...optionalInjections: unknown[]
  ): ApiDelegateResponse<models.{{operationIdCamelCase}}Response{{^returnType}} | void{{/returnType}}>;
  {{/operation}}
  {{/operations}}
}

@controller({injectContainerOnly: true})
export class {{classname}}Controller implements Delegator<{{classname}}Delegate> {
  static delegateToken = Symbol('{{classname}}Delegate');

  constructor(
    @inject('Logger') private readonly logger: Logger,
    @inject({{classname}}Controller.delegateToken) public readonly delegate: {{classname}}Delegate,
  ) {
  }
  {{#operations}}
  {{#operation}}

  @route.{{httpMethod}}('{{path}}'.replace(/{([^}]*)}/g, ':$1'))
  async handle{{operationIdCamelCase}}(requestContainer: DependencyContainer) {
    const basicRouteParams = await requestContainer.resolve(BasicRouteParams);
    const request: models.{{operationIdCamelCase}}Request = {
      {{#bodyParam}}
      body: models.{{dataType}}FromJSON(basicRouteParams.req.body),
      {{/bodyParam}}
    };
    const target = this.delegate.constructor.prototype;
    const args = await resolveParams(
      requestContainer,
      target,
      'handle{{operationIdCamelCase}}',
      request,
    ) as [models.{{operationIdCamelCase}}Request, ...unknown[]];
    try {
      const delegateResponse = await this.delegate.handle{{operationIdCamelCase}}(...args);
      if (handleAlternateActions(delegateResponse, basicRouteParams)) {
        return;
      }
      {{#returnType}}
      const responseJson = models.{{returnType}}ToJSON(delegateResponse.body);
      basicRouteParams.res.status(delegateResponse?.httpCode ?? 200).send(responseJson);
      {{/returnType}}
      {{^returnType}}
      basicRouteParams.res.sendStatus(200);
      {{/returnType}}
    } catch (err: unknown) {
      basicRouteParams.res.status(500).send((err as {message?: string}).message ?? '');
    }
  }
  {{/operation}}
  {{/operations}}
}
