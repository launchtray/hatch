{{>licenseInfo}}
/* eslint-disable @typescript-eslint/no-empty-interface,dot-notation */
import {
  controller,
  Delegator,
  route,
} from '@launchtray/hatch-server';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';
import {inject, Logger} from '@launchtray/hatch-util';
import {
  DependencyContainer,
  resolveParams,
} from '@launchtray/tsyringe-async';
import {
  handleApiAlternateActions,
  handleApiError,
  requireString,
  requireOptionalString,
} from '../runtime';
{{#imports.0}}
import * as models from '../models';
{{/imports.0}}

export interface {{classname}}Delegate {
  {{#operations}}
  {{#operation}}
  handle{{operationIdCamelCase}}(
    request: models.{{operationIdCamelCase}}Request,
    ...optionalInjections: unknown[]
  ): models.ApiDelegateResponse<models.{{operationIdCamelCase}}Response{{^returnType}}{{^responseHeaders.0}} | void{{/responseHeaders.0}}{{/returnType}}>;
  {{/operation}}
  {{/operations}}
}

@controller({injectContainerOnly: true})
export class {{classname}}Controller implements Delegator<{{classname}}Delegate> {
  static delegateToken = Symbol('{{classname}}Delegate');

  constructor(
    @inject('Logger') private readonly logger: Logger,
    @inject({{classname}}Controller.delegateToken) public readonly delegate: {{classname}}Delegate,
  ) {
  }
  {{#operations}}
  {{#operation}}

  @route.{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}('{{path}}'{{#pathParams.0}}.replace(/{([^}]*)}/g, ':$1'){{/pathParams.0}})
  async handle{{operationIdCamelCase}}(requestContainer: DependencyContainer) {
    const basicRouteParams = await requestContainer.resolve(BasicRouteParams);
    try {
      const request: models.{{operationIdCamelCase}}Request = {
        {{#headerParams.0}}
        headers: {
        {{#headerParams}}
          {{paramName}}: require{{^required}}Optional{{/required}}String(
            basicRouteParams.req.header('{{baseName}}'),
            'header: "{{baseName}}"',
          ),
        {{/headerParams}}
        },
        {{/headerParams.0}}
        {{#bodyParam}}
        body: models.{{dataType}}FromJSON(basicRouteParams.req.body),
        {{/bodyParam}}
        {{#pathParams.0}}
        pathParams: {
        {{#pathParams}}
          {{paramName}}: require{{^required}}Optional{{/required}}String(
            basicRouteParams.req.params.{{baseName}},
            'path param: "{{baseName}}"',
          ),
        {{/pathParams}}
        },
        {{/pathParams.0}}
        {{#queryParams.0}}
          queryParams: {
          {{#queryParams}}
            {{paramName}}: require{{^required}}Optional{{/required}}String(
            basicRouteParams.req.query.{{baseName}},
            'query param: "{{baseName}}"',
            ),
          {{/queryParams}}
          },
        {{/queryParams.0}}
      };
      const target = this.delegate.constructor.prototype;
      const args = await resolveParams(
        requestContainer,
        target,
        'handle{{operationIdCamelCase}}',
        request,
      ) as [models.{{operationIdCamelCase}}Request, ...unknown[]];

      const delegateResponse = await this.delegate.handle{{operationIdCamelCase}}(...args);
      if (handleApiAlternateActions(delegateResponse, basicRouteParams)) {
        return;
      }

      {{#responseHeaders.0}}
      const responseHeaders = {};
      {{#responseHeaders}}
      if (delegateResponse.headers.{{name}} != null) {
        responseHeaders['{{baseName}}'] = delegateResponse.headers.{{name}};
      }
      {{/responseHeaders}}
      basicRouteParams.res.set(responseHeaders);
      {{/responseHeaders.0}}

      {{#returnType}}
      const responseJson = models.{{returnType}}ToJSON(delegateResponse.body);
      basicRouteParams.res.status(delegateResponse?.httpCode ?? 200).send(responseJson);
      {{/returnType}}
      {{^returnType}}
      basicRouteParams.res.sendStatus(200);
      {{/returnType}}
    } catch (err: unknown) {
      this.logger.info(`Error servicing handle{{operationIdCamelCase}}: ${(err as {message?: string}).message}`);
      if (handleApiError(err, basicRouteParams)) {
        return;
      }
      basicRouteParams.res.status(500).send((err as {message?: string}).message ?? '');
    }
  }
  {{/operation}}
  {{/operations}}
}
