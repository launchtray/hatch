/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import stream from 'stream';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';

import {
  ApiAlternateAction,
  ApiDelegateResponse,
  ApiError,
  preventsControllerResponse,
  PREVENT_CONTROLLER_RESPONSE,
  getStatusCode,
  isApiError,
  getAlternateAction,
  isApiAlternateAction,
} from './models';

const isStream = (value: unknown) => value != null && (value as {pipeTo?: unknown}).pipeTo != null;

export function exists(json: any, key: string) {
  const value = json[key];
  return value !== null && value !== undefined;
}

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

export const apiErrorResponseSent = (err: unknown, basicRouteParams: BasicRouteParams): boolean => {
  if (isApiError(err)) {
    try {
      const altAction = getAlternateAction(err);
      if (alternateActionResponseSent(altAction, basicRouteParams)) {
        return true;
      }
    } catch (err: unknown) {
      return false;
    }
  }
  return false;
}

export const throwInvalidParamError = (paramName: string): never => {
  throw new ApiError(new ApiAlternateAction(400), `Bad request: missing/invalid ${paramName}`);
};

{{> common-runtime}}

export const alternateActionResponseSent = (
  delegateResponse: unknown,
  basicRouteParams: BasicRouteParams
): delegateResponse is ApiAlternateAction => {
  if (isApiAlternateAction(delegateResponse)) {
    if (preventsControllerResponse(delegateResponse)) {
      return true;
    }
    const statusCode = getStatusCode(delegateResponse);
    if (delegateResponse.headers != null) {
      basicRouteParams.res.set(delegateResponse.headers);
    }
    if (statusCode != null) {
      basicRouteParams.res.status(statusCode);
      const {body} = delegateResponse as {body?: any};
      if (body == null) {
        basicRouteParams.res.end();
      } else if (isStream(body)) {
        // https://stackoverflow.com/questions/73308289
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        stream.Readable.fromWeb(body).pipe(basicRouteParams.res);
      } else {
        basicRouteParams.res.send(body);
      }
      return true;
    }
    basicRouteParams.res.status(500).send('Unknown alternate action');
    return true;
  }
  return false;
};

export const getLocalApiReturnValue = <T>(
  delegateResponse: T | ApiAlternateAction,
): T => {
  if (isApiAlternateAction(delegateResponse)) {
    if (preventsControllerResponse(delegateResponse)) {
      throw new ApiError(
        new ApiAlternateAction(500),
        'Use of PREVENT_CONTROLLER_RESPONSE for local server-side API calls is not supported. ' +
          'Refactor ApiDelegate to avoid this path for local calls (e.g. via branching on request.isLocal)'
      );
    }
    throw new ApiError(delegateResponse);
  }
  return delegateResponse;
};
