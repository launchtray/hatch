/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';

import {
  ApiAlternateAction,
  ApiError,
  preventsControllerResponse,
  PREVENT_CONTROLLER_RESPONSE,
  getHttpError,
  isApiError,
  getAlternateAction,
  isApiAlternateAction,
} from './models';

export type AnyType = any;

export function exists(json: any, key: string) {
  const value = json[key];
  return value !== null && value !== undefined;
}

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

export const handleApiError = (err: unknown, basicRouteParams: BasicRouteParams): boolean => {
  if (isApiError(err)) {
    try {
      const altAction = getAlternateAction(err);
      if (handleApiAlternateActions(altAction, basicRouteParams)) {
        return true;
      }
    } catch (err: unknown) {
      return false;
    }
  }
  return false;
}

export const throwInvalidParamError = (paramName: string): never => {
  throw new ApiError(new ApiAlternateAction(400), `Bad request: missing/invalid ${paramName}`);
};

export const requireNonNull = <T>(value: T | null | undefined, name: string): T => {
  if (value != null) {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireString = (value: unknown | null | undefined, name: string): string => {
  if (typeof value === 'string') {
    return value;
  }
  return throwInvalidParamError(name);
};

export const requireOptionalString = (value: unknown | null | undefined, name: string): string | undefined => {
  if (value == null) {
    return undefined;
  }
  if (typeof value === 'string') {
    return value;
  }
  return throwInvalidParamError(name);
};

export const handleApiAlternateActions = (
  delegateResponse: unknown,
  basicRouteParams: BasicRouteParams
): delegateResponse is ApiAlternateAction => {
  if (isApiAlternateAction(delegateResponse)) {
    if (preventsControllerResponse(delegateResponse)) {
      return true;
    }
    const httpError = getHttpError(delegateResponse);
    if (delegateResponse.headers != null) {
      basicRouteParams.res.set(delegateResponse.headers);
    }
    if (httpError != null) {
      basicRouteParams.res.status(httpError).send((delegateResponse as {body?: any}).body ?? '');
      return true;
    }
    basicRouteParams.res.status(500).send('Unknown alternate action');
    return true;
  }
  return false;
};
