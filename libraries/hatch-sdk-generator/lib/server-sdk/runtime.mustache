/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import {
  route,
} from '@launchtray/hatch-server';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';

export type AnyType = any;

export function exists(json: any, key: string) {
  const value = json[key];
  return value !== null && value !== undefined;
}

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

const PREVENT_CONTROLLER_RESPONSE_CODE = Symbol('preventControllerResponse');
const ALT_ACTION_CODE_KEY: unique symbol = Symbol('altActionCodeKey');

export class AlternateAction {
  public readonly [ALT_ACTION_CODE_KEY]: number | symbol;

  constructor(
    code: number | symbol,
    public readonly body?: unknown
  ) {
    this[ALT_ACTION_CODE_KEY] = code;
  }
}

export const preventsControllerResponse = (err: AlternateAction) => {
  return err[ALT_ACTION_CODE_KEY] === PREVENT_CONTROLLER_RESPONSE_CODE;
};

export const PREVENT_CONTROLLER_RESPONSE = new AlternateAction(PREVENT_CONTROLLER_RESPONSE_CODE);

export const getHttpError = (err: AlternateAction): number | undefined => {
  const errorCode = err[ALT_ACTION_CODE_KEY];
  if (typeof errorCode === 'number') {
    return errorCode;
  }
  return undefined;
};

const isAlternateAction = (response: unknown): response is AlternateAction => {
  return ((response as AlternateAction)[ALT_ACTION_CODE_KEY] != null);
};

export const handleAlternateActions = (
  delegateResponse: unknown,
  basicRouteParams: BasicRouteParams
): delegateResponse is AlternateAction => {
  if (isAlternateAction(delegateResponse)) {
    if (preventsControllerResponse(delegateResponse)) {
      return true;
    }
    const httpError = getHttpError(delegateResponse);
    if (httpError != null) {
      basicRouteParams.res.status(httpError).send((delegateResponse as {body?: any}).body ?? '');
      return true;
    }
    basicRouteParams.res.status(500).send('Unknown alternate action');
    return true;
  }
  return false;
};

export const route_GET = route.get;
export const route_POST = route.post;
export const route_PUT = route.put;
export const route_PATCH = route.patch;
export const route_DELETE = route.delete;
export const route_HEAD = route.head;

export type ControllerDelegateResponse<T> = Promise<T | AlternateAction> | T | AlternateAction;
