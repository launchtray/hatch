/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}
import {
  route as hatch_route,
} from '@launchtray/hatch-server';
import {BasicRouteParams} from '@launchtray/hatch-server-middleware';

import {
  ApiAlternateAction,
  preventsControllerResponse,
  PREVENT_CONTROLLER_RESPONSE,
  getHttpError,
  isApiAlternateAction,
} from './models';

export type AnyType = any;

export function exists(json: any, key: string) {
  const value = json[key];
  return value !== null && value !== undefined;
}

export function mapValues(data: any, fn: (item: any) => any) {
  return Object.keys(data).reduce(
    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),
    {}
  );
}

export const handleApiAlternateActions = (
  delegateResponse: unknown,
  basicRouteParams: BasicRouteParams
): delegateResponse is ApiAlternateAction => {
  if (isApiAlternateAction(delegateResponse)) {
    if (preventsControllerResponse(delegateResponse)) {
      return true;
    }
    const httpError = getHttpError(delegateResponse);
    if (httpError != null) {
      basicRouteParams.res.status(httpError).send((delegateResponse as {body?: any}).body ?? '');
      return true;
    }
    basicRouteParams.res.status(500).send('Unknown alternate action');
    return true;
  }
  return false;
};

export const route = {
  GET: hatch_route.get,
  POST: hatch_route.post,
  PUT: hatch_route.put,
  PATCH: hatch_route.patch,
  DELETE: hatch_route.delete,
  HEAD: hatch_route.head,
};
